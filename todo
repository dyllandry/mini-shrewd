todo now:
    ✔ draw a sprite on screen @done(22-09-01 21:20)
    ✔ draw a character on screen @done(22-09-01 22:14)
    ✔ move the character around using wasd @done(22-09-03 13:14)
    ✔ get the sprite to flip if moving the other direction @done(22-09-03 19:42)
    ✔ create ground sprite & draw it @done(22-09-03 20:35)
    ✔ draw player above the ground @done(22-09-03 20:51)
    ✔ draw a bunch of ground around the player @done(22-09-03 21:29)
        A future issue here is that translation units are pixels. So drawing 32 pixels tiled just requires translating them by 32 units left/right. This means on a higher resolution that everything will be smaller. I'd rather keep sprites on the screen the same size between different resolutions. This will require to scale everything I draw by the screen's resolution or better yet physical size if that information is available.
            Sprites might be able to be scaled by transformation.scale
    inspecting stuff:
        ✔ convert click screen coordinates to world coordinates @done(22-09-10 10:37)
        ✔ compute whether or not image was clicked on @done(22-09-10 19:04)
        ✔ add component that tracks whether an image was clicked that frame @done(22-09-11 10:12)
        ✔ add system for checking if inspectable things were clicked @done(22-09-12 19:00)
        ✔ add minimum example of bevy_egui @done(22-09-13 21:47)
        ✔ find right bevy_egui widget/thing for the dropdown @done(22-09-15 21:13)
            It's a plain "area"
        ✔ make the dropdown show up at the current mouse location when you click @done(22-09-18 18:10)
        ✔ make the dropdown close when you click on anything else @done(22-09-30 09:14)
        ☐ display inspectables in dropdown
            Dropdown should probably have some component that stores what inspectables were clicked. Maybe references to the inspectable components themselves. Then from that list, it can draw the corresponding UI. When one of those UI buttons are clicked, it should know which inspectable that UI element corresponds to. After that, maybe it can send an event that the inspectable dropdown was clicked like InspectableDropdownItemClicked with some payload that lets the next systems respond to the specific inspectable that was clicked.
        ☐ get a bevy_egui button sending as signal that can be used to show the inspect message
        ☐ draw example window + button with bevy_egui
            https://github.com/mvlabat/bevy_egui
        ☐ create way of debugging sprite bounds by drawing a red rectangular outline around the sprite
            ☐ add component that allows following
            ☐ add entity that is red outline
                Maybe I can make this compnent like a component bundle so its easier to add.
                Will have to make this outline out of 4 individual rectangles
        ☐ make dropdown menu
        ☐ make dropdown menu appear when clicking on an item
            Will want to make a component that contains the info an item would display when inspecting it.

todo future:
    ☐ make trees change their z-order depending on whether their height is above the players
        If the player's translation y value is higher than the tree, change the tree to be 1 SpriteLayer below the player.
    ☐ position game objects by game world units instead of pixels
        The cursor2world example in the bevy cheatbook describes a process of turning cursor window position into normalized device coordinates (ndc), to world position. That tutorial is not a solution to this problem, but it talks about stuff related to it.
            link: https://bevy-cheatbook.github.io/cookbook/cursor2world.html?search=
        This post has some good answers on it. Pretty much convert mouse location to world location, then use clickables object's transform to see if mouse was in it. Also some other stuff.
            link: https://github.com/bevyengine/bevy/discussions/3256


ideas:
    - Split player sprite into top and bottom half, the bottom half will always be drawn under things like bushes tall grass, while the top half will be drawn above. This will give the character the appearance of stepping into the bushes and grass instead of clipping in front of them once they are high enough vertically.
        Could also draw the feet with lower opacity. Might be an easy way of making the feet seem like they blend with the plants even better.